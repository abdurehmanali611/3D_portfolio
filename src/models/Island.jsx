/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import { a } from '@react-spring/three'

import islandScene from '/3d/island.glb'

 const Island = ({isRotating, setRotating, setcurrentstage, ...props}) => {

    const islandRef = useRef()
    const {gl, viewport} = useThree()

  const { nodes, materials } = useGLTF(islandScene)

  const lastx = useRef(0)
  const rotationspeed = useRef(0)
  const dampingfactor = 0.95

  const handlepointerdown = (e) => {
      e.stopPropagation()
      e.preventDefault()
      setRotating(true)

      const clientx = e.touches ? 
      e.touches[0].clientx 
      : e.clientx

      lastx.current = clientx
  }

  const handlepointerup = (e) => {
    e.stopPropagation()
    e.preventDefault()
    setRotating(false)
}

const handlepointermove = (e) => {
  e.stopPropagation()
  e.preventDefault()

  if (isRotating) {
    const clientx = e.touches ? 
      e.touches[0].clientx 
      : e.clientx

      const delta = (clientx - lastx.current) / viewport.width

      islandRef.current.rotation.y += delta * 0.01 * Math.PI
      lastx.current = clientx
      rotationspeed.current = delta * 0.01 * Math.PI
    }
}

const handlekeyDown = (e) => {
    if (e.key === 'ArrowLeft' ) {
      if (!isRotating) setRotating(true)
      islandRef.current.rotation.y += 0.01 * Math.PI 
      rotationspeed.current = 0.0125
    }else if (e.key === 'ArrowRight') {
      if (!isRotating) setRotating(true)
      islandRef.current.rotation.y -= 0.01 * Math.PI 
      rotationspeed.current = -0.0125
    }
}

const handlekeyUp = (e) => {
   if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
    setRotating(false)
}
}

useFrame(() => {
  if(!isRotating) {
    rotationspeed.current *= dampingfactor

    if (Math.abs(rotationspeed.current) < 0.001) {
      rotationspeed.current = 0
    }

    islandRef.current.rotation.y += rotationspeed.current
  }else {
    const rotation = islandRef.current.rotation.y

    const normalizedrotation = 
    ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI)

    switch(true) {
      case normalizedrotation >= 5.45 && normalizedrotation <= 5.85:
        setcurrentstage(4)
        break
      case normalizedrotation >= 0.85 && normalizedrotation <= 1.3:
        setcurrentstage(3)
          break
      case normalizedrotation >= 2.4 && normalizedrotation <= 2.6:
          setcurrentstage(2)
            break
      case normalizedrotation >= 4.25 && normalizedrotation <= 4.75:
            setcurrentstage(1)
              break
      default: 
           setcurrentstage(null)
    }
  }
})

useEffect(() => {

      const canvas = gl.domElement
   canvas.addEventListener('pointerdown', handlepointerdown)
   canvas.addEventListener('pointermove', handlepointermove)
   canvas.addEventListener('pointerup', handlepointerup)
   document.addEventListener('keydown', handlekeyDown)
   document.addEventListener('keyup', handlekeyUp)

   return () => {
    canvas.removeEventListener('pointerdown', handlepointerdown)
    canvas.removeEventListener('pointermove', handlepointermove)
    canvas.removeEventListener('pointerup', handlepointerup)
    document.removeEventListener('keydown', handlekeyDown)
    document.removeEventListener('keyup', handlekeyUp)
   }

}, [gl, handlepointerdown, handlepointermove, handlepointerup])
  return (
    <a.group ref={islandRef} {...props}>
      <mesh
        geometry={nodes.polySurface944_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface945_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface946_tree2_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface947_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface948_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface949_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.pCube11_rocks1_0.geometry}
        material={materials.PaletteMaterial001}
      />
    </a.group>
  )
}

export default Island
